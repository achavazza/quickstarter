// Table of Contents
// ======================================================================================================
// # Clearfix
// # For
// # Constructor mixin
// # Mixins

// #Clearfix
// ================================
.clearfix(){
    &:after{
        clear:both;
        content:' ';
        display:block;
        font-size:0;
        line-height:0;
        visibility:hidden;
        width:0;
        height:0;
    }
    * html &,
    *:first-child+html &{
        zoom:1;
    }
}


// #For
// ================================

.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}

.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}

// #Constructor
// ================================


.__constructor (@qUnit, @t){
    @i: @t;
    .for(@t); .-each(@i){
      .@{qUnit}-@{i}{ width: 100% * (@i / @t)}
    }
}
.__constructor (@qUnit, @t, @display) when (iskeyword(@display)){
    @i: @t;
    .for(@t); .-each(@i){
      .@{qUnit}-@{i}-@{display}{ width: 100% * (@i / @t)}
    }
}

.__constructorProp (@qUnit, @t, @prop, @property){
    @i: @t;
    .for(@t); .-each(@i){
      .@{prop}-@{i}[class*="@{qUnit}-"] {@{property}: 100% * (@i / @t)}
    }
}
.__constructorProp (@qUnit, @t, @prop, @property, @display) when (iskeyword(@display)){
    @i: @t;
    .for(@t); .-each(@i){
      .@{prop}-@{i}-@{display}[class*="@{qUnit}-"] {@{property}: 100% * (@i / @t)}
    }
}
.__constructorNone (@qUnit, @display) when (iskeyword(@display)){
    .@{qUnit}-none-@{display}{
        width  : auto;
        display: block;
        float  : none;
    }
}

.__generateGrid(@grids) {
    .for(@grids);
    .-each(@item) {
        @name: e(replace(@item, ':(.*)', ''));
        @value: replace(@item, '^[^:]*:', '');
        @number : ~`parseInt(@{value})`;

        .__constructor     (@name, @number);
        .__constructorProp (@name, @number, prefix, margin-left );
        .__constructorProp (@name, @number, suffix, margin-right); //deprecated
        .__constructorProp (@name, @number, push  , left        );
        .__constructorProp (@name, @number, pull  , right       );
    }
}

.__generateGridResponsive(@grids, @device) {
    .for(@grids);
    .-each(@item) {
        @name: e(replace(@item, ':(.*)', ''));
        @value: replace(@item, '^[^:]*:', '');
        @number : ~`parseInt(@{value})`;

        .__constructor     (@name, @number, @device);
        .__constructorProp (@name, @number, prefix, margin-left , @device);
        .__constructorProp (@name, @number, suffix, margin-right, @device); //deprecated
        .__constructorProp (@name, @number, push  , left        , @device);
        .__constructorProp (@name, @number, pull  , right       , @device);
        .__constructorNone (@name, @device);
    }
}

.__generateSetupSnap(@grids) {
    .for(@grids);
    .-each(@item) {
        @name: e(replace(@item, ':(.*)', ''));
        [class*="@{name}-"]{
          .grid-snap &,
          .row-snap > &{
            padding-left: 0;
            padding-right: 0;
          }
        }
    }
}

.output(@var,@mixin){
  .setup(@var) when (@mixin = setup){
    [class*="@{name}-"]{
        display: inline;
        float: left;
        padding-left:  @gutter;
        padding-right: @gutter;
        .box-model(border-box);
    }
  }
  .pushpull(@var) when (@mixin = pushpull){
    [class*="@{name}-"][class*="push"],
    [class*="@{name}-"][class*="pull"]{
        position: relative;
    }
  }
  .gridsnap(@var) when (@mixin = gridsnap){
    [class*="@{name}-"]{
      .grid-snap &,
      .row-snap > &{
        padding-left: 0;
        padding-right: 0;
      }
    }
  }
  .colcentered(@var) when (@mixin = colcentered){
    [class*="@{name}-"]{
      .grid-centered &,
      .row-centered > &{
        display: block;
        float:   none;
        margin: 0 auto !important;
      }
    }
  }
  .debug(@var) when (@mixin = debug){
    [class*="@{name}-"]{
      background: rgba(255,0,0,0.1) !important;
        //box-shadow: 0 0 transparent ,
        //            0 0 transparent !important;
    }
  }
  .debugsm(@var) when (@mixin = debugsm){
    [class*="@{name}-"]{
      background: rgba(255,0,0,0.1) !important;
      box-shadow: @gutter 0 rgba(255, 0, 0, 0.2) inset,
                 -@gutter 0 rgba(255, 0, 0, 0.2) inset  !important;
      background-clip: content-box !important;
    }
  }
  .setup(@var);
  .pushpull(@var);
  .gridsnap(@var);
  .colcentered(@var);
  .debug(@var);
  .debugsm(@var);
}

.__generateSetup(@grids, @mixin) {
    .for(@grids);
    .-each(@item) {
        @name: e(replace(@item, ':(.*)', ''));
        .output(@name, @mixin);
    }
}


// #Mixins
// ================================

// Gradient generator
// --------------------------------
// thanks to http://lesselements.com

.gradient(@start: #EEE, @stop: #FFF, @repeat: repeat-x) {
  background-color: @start;
  background-image: -webkit-gradient(linear,
                     left bottom,
                     left top,
                     color-stop(0, @start),
                     color-stop(1, @stop));

  background-image: -webkit-linear-gradient(top,
                     @start 0%,
                     @stop 100%);

  background-image: -moz-linear-gradient(center bottom,
                     @start 0%,
                     @stop 100%);

  background-image: -ms-linear-gradient(bottom,
                     @start,
                     @stop);

  background-image: -o-linear-gradient(@stop,
                     @start);

  background-image: linear-gradient(to bottom,
                    @start 0%,
                    @stop 100%);

  background-repeat: @repeat;
  //filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@stop,@start));
}

// Box model
// --------------------------------

.box-model(@model: border-box){
  -webkit-box-sizing: @model;
     -moz-box-sizing: @model;
      -ms-box-sizing: @model;
       -o-box-sizing: @model;
          box-sizing: @model;
}

// Transitions
// --------------------------------

.transition(@property, @duration:0s, @easing:linear, @delay:0s){
  -webkit-transition: @duration @easing @delay;
     -moz-transition: @duration @easing @delay;
      -ms-transition: @duration @easing @delay;
       -o-transition: @duration @easing @delay;
          transition: @duration @easing @delay;
}

// User select
// --------------------------------

.user-select(@type: none){
  -webkit-user-drag:   @type;
  -webkit-user-select: @type;
     -moz-user-select: @type;
      -ms-user-select: @type;
       -o-user-select: @type;
          user-select: @type;
}

// Font color
// --------------------------------
.color(@bgcolor, @threshold:30%, @dark:@baseFontColor, @light:@altFontColor){
  color:contrast(@bgcolor, @dark, @light, @threshold);
}

// Font contrast
// --------------------------------

.contrast (@bgColor, @shadow: true, @threshold: 30%, @dark:@baseFontColor, @light:@altFontColor ){
  @fontColor : contrast(@bgColor, @dark, @light , @threshold);
  color: @fontColor;
  .shadow() when (@shadow = true){
    .contrastShadow() when (lightness(@bgColor) >= lightness(@fontColor)){
      text-shadow: 0 1px 0 fade(contrast(@fontColor, @dark, @light, @threshold), 20%);
    }
    .contrastShadow() when (lightness(@bgColor) < lightness(@fontColor)){
      text-shadow: 0 -1px 0 fade(contrast(@fontColor, @dark, @light, @threshold), 20%);
    }
    .contrastShadow();
  }
  .shadow();
}

// Box element mixin
// --------------------------------

.box(@pdBox){
    padding: @pdBox;
}

.boxHead(@pdBox){
    margin: -@pdBox -@pdBox 0;
    padding: @pdBox;
}

.boxFoot(@pdBox){
    margin: 0 -@pdBox -@pdBox;
    padding: @pdBox;
}

.boxContent(@pdBox){
    margin: 0 -@pdBox;
    padding: @pdBox;
}

.boxWrap(@pdBox){
    margin: 0 -@pdBox;
}
